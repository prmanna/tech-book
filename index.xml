<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Technical Book</title><link>https://prasenjitmanna.com/tech-book/</link><description>Recent content in Introduction on Technical Book</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://prasenjitmanna.com/tech-book/index.xml" rel="self" type="application/rss+xml"/><item><title>Breadth First Search</title><link>https://prasenjitmanna.com/tech-book/docs/algorithms/breadth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/algorithms/breadth-first-search/</guid><description>Breadth First Search # Intro # Hopefully, by this time, you&amp;rsquo;ve drunk enough DFS kool-aid to understand its immense power and seen enough visualization to create a call stack in your mind. Now let me introduce the companion spell Breadth First Search (BFS). The names are self-explanatory. While depth first search reaches for depth (child nodes) first before breadth (nodes in the same level/depth), breadth first search visits all nodes in a level before starting to visit the next level.</description></item><item><title>Depth First Search</title><link>https://prasenjitmanna.com/tech-book/docs/algorithms/depth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/algorithms/depth-first-search/</guid><description>Depth First Search # Intro # The pre-order traversal of a tree is DFS.
Node&amp;lt;int&amp;gt;* dfs(Node&amp;lt;int&amp;gt;* root, int target) { if (root == nullptr) return nullptr; if (root-&amp;gt;val == target) return root; // return non-null return value from the recursive calls Node&amp;lt;int&amp;gt;* left = dfs(root-&amp;gt;left, target); if (left != nullptr) return left; // at this point, we know left is null, and right could be null or non-null // we return right child&amp;#39;s recursive call result directly because // - if it&amp;#39;s non-null we should return it // - if it&amp;#39;s null, then both left and right are null, we want to return null return dfs(root-&amp;gt;right, target); } Max depth of a binary tree # Max depth of a binary tree is the longest root-to-leaf path.</description></item><item><title>Easy Complexity</title><link>https://prasenjitmanna.com/tech-book/docs/algorithms/easy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/algorithms/easy/</guid><description> Easy Complexity #</description></item><item><title>Two Pointers &amp; Sliding Window</title><link>https://prasenjitmanna.com/tech-book/docs/algorithms/two-pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/algorithms/two-pointers/</guid><description>Two Pointers # Valid Palindrome # Determine whether a string is a palindrome, ignoring non-alphanumeric characters and case. Examples:
Input: Do geese see God? Output: True
Input: Was it a car or a cat I saw? Output: True
Input: A brown fox jumping over Output: False
#include &amp;lt;cctype&amp;gt; // isalnum, tolower #include &amp;lt;iostream&amp;gt; // boolalpha, cin, cout #include &amp;lt;string&amp;gt; // getline bool is_palindrome(std::string s) { int l = 0, r = s.</description></item><item><title>Design A Code-Deployment System</title><link>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/code-deployment-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/code-deployment-system/</guid><description>1. Gathering System Requirements # As with any systems design interview question, the first thing that we want to do is to gather system requirements; we need to figure out what system we&amp;rsquo;re building exactly.
From the answers we were given to our clarifying questions (see Prompt Box), we&amp;rsquo;re building a system that involves repeatedly (in the order of thousands of times per day) building and deploying code to hundreds of thousands of machines spread out across 5-10 regions around the world.</description></item><item><title>Design A Stock-Broker System</title><link>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/stock-broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/stock-broker/</guid><description>1. Gathering System Requirements # As with any systems design interview question, the first thing that we want to do is to gather system requirements; we need to figure out what system we&amp;rsquo;re building exactly.
We&amp;rsquo;re building a stock-brokerage platform like Robinhood that functions as the intermediary between end-customers and some central stock exchange. The idea is that the central stock exchange is the platform that actually executes stock trades, whereas the stockbroker is just the platform that customers talk to when they want to place a trade&amp;ndash;the stock brokerage is &amp;ldquo;simpler&amp;rdquo; and more &amp;ldquo;human-readable&amp;rdquo;, so to speak.</description></item><item><title>Design Amazon</title><link>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/design-amazon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/design-amazon/</guid><description>1. Gathering System Requirements # As with any systems design interview question, the first thing that we want to do is to gather system requirements; we need to figure out what system we&amp;rsquo;re building exactly.
We&amp;rsquo;re designing the e-commerce side of the Amazon website, and more specifically, the system that supports users searching for items on the Amazon home page, adding items to cart, submitting orders, and those orders being assigned to relevant Amazon warehouses for shipment.</description></item><item><title>Design Slack</title><link>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/design-slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/design-slack/</guid><description>1. Gathering System Requirements # As with any systems design interview question, the first thing that we want to do is to gather system requirements; we need to figure out what system we&amp;rsquo;re building exactly.
We&amp;rsquo;re designing the core communication system behind Slack, which allows users to send instant messages in Slack channels.
Specifically, we&amp;rsquo;ll want to support:
Loading the most recent messages in a Slack channel when a user clicks on the channel.</description></item><item><title>Google Drive - Design</title><link>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/google-drive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/systemdesign-tips/google-drive/</guid><description>1. Gathering System Requirements # As with any systems design interview question, the first thing that we want to do is to gather system requirements; we need to figure out what system we&amp;rsquo;re building exactly.
We&amp;rsquo;re designing the core user flow of the Google Drive web application. This consists of storing two main entities: folders and files. More specifically, the system should allow users to create folders, upload and download files, and rename and move entities once they&amp;rsquo;re stored.</description></item><item><title>IP Precedence And TOS | DSCP</title><link>https://prasenjitmanna.com/tech-book/docs/networking-tips/ip-tos-dscp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/networking-tips/ip-tos-dscp/</guid><description>Intro # 8 Bits of Type of Service in IP Header.
IP Precedence # RFC791/RFC1349 Interpretation
** Bits ** 7-5 IP Precedence
111 Network Control
110 Internetwork Control
101 Critic/ECP
100 Flash Override
011 Flash
010 Immediate
001 Priority
000 Routine
Bits
4 (1 = Low Delay; 0 = Normal Delay)
3 (1 = High Throughput; 0 = Normal Throughput)
2 (1 = High Reliability; 0 = Normal Reliability)</description></item><item><title>Medium Complexity</title><link>https://prasenjitmanna.com/tech-book/docs/algorithms/medium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/algorithms/medium/</guid><description>Medium Complexity # Number Swapper: Write a function to swap a number in place (that is, without temporary variables). Hints - with just addition/substruction arithmatic, XOR.
Tic Tac Win: Design an algorithm to figure out if someone has won a game of tic-tac-toe.
Hashing # Two Sum: Find a pair in array whose sum equals to the target input: [10,4,1,3,2] Target: 7 Output: [4,3]
Hint - insert in hash and then start searching from first element, find the difference with the target and find the hash.</description></item><item><title>TCP Congestion Control</title><link>https://prasenjitmanna.com/tech-book/docs/networking-tips/tcp-congestion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/docs/networking-tips/tcp-congestion/</guid><description>Intro # TCP is a protocol that is used to transmit information from one computer on the internet to another, and is the protocol Iâ€™ll be focused on in this post. What distinguishes TCP from other networking protocols is that it guarantees 100% transmission. This means that if you send 100kb of data from one computer to another using TCP, all 100kb will make it to the other side. This property of TCP is very powerful and is the reason that many network applications we use, such as the web and email are built on top of it.</description></item><item><title>First Blog</title><link>https://prasenjitmanna.com/tech-book/posts/2022-01-18-first-doc/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://prasenjitmanna.com/tech-book/posts/2022-01-18-first-doc/</guid><description>Preface # This is my black board for my future technical book. There is no structure of this blog posts. Whenever I find a good technical literature, I am planning to add it here.
Feedback is very important for any development cycle. Please drop a message at prasenjit.manna@gmail.com.
Thanks, Prasenjit Manna</description></item></channel></rss>